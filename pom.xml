<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.bips</groupId>
	<artifactId>bootweb</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>bootweb</name>
	<description>Demo project for Spring Boot</description>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>


	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<!-- Löschen evtl. -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        
        <!-- Löschen evtl. -->
		 <dependency>
		 	<groupId>org.springframework.boot</groupId>
			 <artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
	  
	  <!--  Developer Tools -->			
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

        <!-- JPA Data (We are going to use Repositories, Entities, Hibernate, etc...) -->
		<!-- Löschen evtl. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- Spring Jooq alternative to JPA  -->
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		
		<!-- For XML Response -->
		
		<dependency>
		  <groupId>com.fasterxml.jackson.dataformat</groupId>
		  <artifactId>jackson-dataformat-xml</artifactId>
		</dependency>   
        
        <!-- Swagger with Json -->   
        <dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.8.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.8.0</version>
			<scope>compile</scope>
		</dependency>

        <!-- Use MySQL Connector-J -->

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
		
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
					<!-- Specify the maven code generator plugin -->
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.10.0</version>
				<!-- The plugin should hook into the generate goal -->
					<executions>
						<execution>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
				
					<dependencies>
						<dependency>
							<groupId>mysql</groupId>
							<artifactId>mysql-connector-java</artifactId>
							<version>6.0.6</version>
						</dependency>
					</dependencies>
				
					<!-- Specify the plugin configuration. The configuration format is the 
					same as for the standalone code generator -->
					<configuration>
						<!-- JDBC connection parameters -->
						<jdbc>
							 <driver>com.mysql.cj.jdbc.Driver</driver>
							 <url>${spring.datasource.url}</url>
                             <user>${spring.datasource.username}</user>
							<password>${spring.datasource.password}</password>
						</jdbc>
				
						<!-- Generator parameters -->
						<generator>
							<name>org.jooq.util.DefaultGenerator</name>
							<database>
								<name>org.jooq.util.mysql.MySQLDatabase</name>
								<includes>.*</includes>
								<excludes></excludes>
								<inputSchema>${database.sheme.name}</inputSchema>
							</database>
							<target>
								<packageName>de.bips.bootweb.models.generated</packageName>
								<directory>src/main/java</directory>
							</target>
							<generate>
								<daos>true</daos>
								<pojos>true</pojos>
							</generate>
					   </generator>
				</configuration>
			</plugin>
			<!-- Plugin to Read properties from files for maven properties -->
			 <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>src/main/resources/application.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			
			
		</plugins>
	</build>


</project>
